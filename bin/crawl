#!/usr/bin/env python

import sys
import argparse
import logging
import boto3
import pika
import json

from libbabywalk import SEED_CRAWLER_QUEUE, CRAWLER_REPORT_QUEUE, create_queue, send_message
from libbabywalk.fetch import Content


def main():

    parser = argparse.ArgumentParser()
    parser.add_argument('--verbose', '-v', action='count', default=0)
    parser.add_argument('--tempdir', metavar='<directory>', required=True)
    args = parser.parse_args()

    logging_level = logging.DEBUG if args.verbose else logging.INFO
    logging.basicConfig(format='crawl: %(levelname)s: %(message)s',
                        level=logging_level)
    boto3.set_stream_logger('boto3.resources', logging.CRITICAL)

    connection = pika.BlockingConnection(pika.ConnectionParameters())
    channel = connection.channel()
    create_queue(channel, SEED_CRAWLER_QUEUE)
    create_queue(channel, CRAWLER_REPORT_QUEUE)

    channel.basic_qos(prefetch_count=1)
    channel.basic_consume(create_callback(args.tempdir, CRAWLER_REPORT_QUEUE),
                          queue=SEED_CRAWLER_QUEUE)

    try:
        channel.start_consuming()
    except KeyboardInterrupt:
        channel.stop_consuming()
    finally:
        connection.close()


def create_callback(tempdir, report_queue_name):

    def callback(ch, method, properties, body):

        logging.debug("received %s", body)
        opts = json.loads(body.decode('utf-8', 'strict'))
        opts.update({'directory': tempdir})

        for result in Content.get(opts)
            send_message(ch, report_queue_name, result)

        # acknowledge the request
        ch.basic_ack(delivery_tag=method.delivery_tag)

    return callback


if __name__ == '__main__':
    sys.exit(main())
