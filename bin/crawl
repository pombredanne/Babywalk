#!/usr/bin/env python

import sys
import argparse
import logging
import boto3
import multiprocessing

from libbabywalk.db import get_request, set_completed
from libbabywalk.fetch import fetch_and_upload


def main():

    parser = argparse.ArgumentParser()
    parser.add_argument('--verbose', '-v', action='count', default=0)
    parser.add_argument('--tempdir', metavar='<directory>', required=True)
    args = parser.parse_args()

    logging_level = logging.DEBUG if args.verbose else logging.INFO
    logging.basicConfig(format='crawl: %(levelname)s: %(message)s',
                        level=logging_level)
    boto3.set_stream_logger('boto3.resources', logging.CRITICAL)

    pool = multiprocessing.Pool(300)
    pool.imap_unordered(fetch, generator()):
    pool.close()
    pool.join()


def generator(db):

    client = pymongo.MongoClient()
    db = client.crawling

    while True:
        item = get_request(db)
        if item:
            yield item
        else:
            break


def fetch(request):

    client = pymongo.MongoClient()
    db = client.crawling

    for request, result in fetch_and_upload(request):
        set_completed(db, request, result)


if __name__ == '__main__':
    sys.exit(main())
