#!/usr/bin/env python

import sys
import argparse
import logging
import uuid
import pymongo

from libbabywalk.inputs import rows_from_tsv, filter_ppid_and_seed
from libbabywalk.db import record_request


def main():

    parser = argparse.ArgumentParser()
    parser.add_argument('--verbose', '-v', action='count', default=0)
    parser.add_argument('--mongo', metavar='<mongo url>', required=True)
    parser.add_argument('--input',
                        metavar='<file>',
                        dest='seeds',
                        required=True)
    parser.add_argument('--bucket', metavar='<bucket>', required=True)
    parser.add_argument('--depth', metavar='<number>', required=True)
    parser.add_argument('--tag', default='first')
    args = parser.parse_args()

    logging_level = logging.DEBUG if args.verbose else logging.INFO
    logging.basicConfig(format='seed: %(levelname)s: %(message)s',
                        level=logging_level)

    client = pymongo.MongoClient(args.mongo)
    db = client.crawling

    for seed in filter_ppid_and_seed(rows_from_tsv(args.seeds)):
        request = make_request(seed['url'], args)
        record_request(db, seed, request)


def make_request(url, args):

    uid = str(uuid.uuid3(uuid.NAMESPACE_URL, url))
    return {
        'fetch': {
            'url': url,
            'depth': args.depth
        },
        'upload': {
            'bucket': args.bucket,
            'object': '{}.{}.warc.gz'.format(uuid, args.tag)
        }
    }


if __name__ == '__main__':
    sys.exit(main())
