#!/usr/bin/env python

import sys
import argparse
import logging
import pymongo

from libbabywalk.inputs import read_seeds_from_s3, read_seeds_from_file
from libbabywalk.db import record_seeds, create_requests
from libbabywalk.url import validate


def main():

    parser = argparse.ArgumentParser()
    parser.add_argument('--verbose', '-v', action='count', default=0)

    parser.add_argument('--target', metavar='<s3 uri>', required=True)

    parser_file = parser.add_argument_group('tsv file')
    parser_file.add_argument('--input-file', metavar='<file>', default='seeds.tsv')
    parser_file.add_argument('--url-field', metavar='<field name>', required=True)
    parser_file.add_argument('--tag-field', metavar='<field name>', required=True)

    parser_crawl = parser.add_argument_group('crawl')
    parser_crawl.add_argument('--depth', metavar='<number>', required=True)
    parser_crawl.add_argument('--output', metavar='<object>', default='content')
    args = parser.parse_args()

    logging_level = logging.WARNING - min(logging.WARNING, (10 * args.verbose))
    logging.basicConfig(format='%(levelname)s: %(asctime)s: %(message)s',
                        level=logging_level)
    logging.debug(args)

    client = pymongo.MongoClient(w=0)
    db = client.crawling

    raw_seeds = (
        {
            'url': element[args.url_field],
            'tag': element[args.tag_field]
        #} for element in read_seeds_from_s3(args.target, args.input_file)
        } for element in read_seeds_from_file(args.input_file)
        if args.url_field in element and args.tag_field in element)

    seeds = validate(raw_seeds)

    record_seeds(db, seeds)

    request = {
        'depth': args.depth,
        'upload': args.target + '/' + args.output
    }
    create_requests(db, request)


if __name__ == '__main__':
    sys.exit(main())
